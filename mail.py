import os
import pandas as pd
from mailjet_rest import Client
from dotenv import load_dotenv
import logging
from datetime import datetime


load_dotenv()

class MailjetEmailService:
    def __init__(self):
        """Initialize Mailjet client with credentials from .env file"""
        self.api_key = os.getenv('ApiKey')
        self.api_secret = os.getenv('ApiSecret')
        self.sender_email = os.getenv('SenderEmail')
        
        if not all([self.api_key, self.api_secret, self.sender_email]):
            raise ValueError("Missing Mailjet credentials in .env file")
        
        self.mailjet = Client(auth=(self.api_key, self.api_secret), version='v3.1')
        
        
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
    
    def filter_high_order_count_resorts(self, csv_file_path='query_results.csv', threshold=2):
        """Filter resorts with SearchingOrderCount > threshold"""
        try:
            df = pd.read_csv(csv_file_path)
            filtered_df = df[df['SearchingOrderCount'] > threshold]
            
            self.logger.info(f"Found {len(filtered_df)} resort entries with SearchingOrderCount > {threshold}")
            return filtered_df
        
        except Exception as e:
            self.logger.error(f"Error reading CSV file: {e}")
            return None
    
    def create_email_content(self, filtered_data):
       
        if filtered_data.empty:
            return None, None
        
        
        total_resorts = filtered_data['Resort'].nunique()
        total_orders = filtered_data['SearchingOrderCount'].sum()
        avg_orders = filtered_data['SearchingOrderCount'].mean()
        
        
        html_content = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .header {{ background-color: #f4f4f4; padding: 20px; border-radius: 5px; }}
                .summary {{ background-color: #e8f4fd; padding: 15px; margin: 20px 0; border-radius: 5px; }}
                table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
                th, td {{ padding: 8px; text-align: left; border: 1px solid #ddd; }}
                th {{ background-color: #4CAF50; color: white; }}
                tr:nth-child(even) {{ background-color: #f2f2f2; }}
                .room-type {{ font-size: 12px; color: #666; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h2>This mail is generated by Ujjwal for testing</h2>
                <h2>High Order Count Resort Alert</h2>
                <p>Report generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="summary">
                <h3>Summary Statistics</h3>
                <ul>
                    <li><strong>Total Unique Resorts:</strong> {total_resorts}</li>
                    <li><strong>Total Orders:</strong> {total_orders:,.0f}</li>
                    <li><strong>Average Orders per Entry:</strong> {avg_orders:.1f}</li>
                </ul>
            </div>
            
            <h3>Resort Details (SearchingOrderCount > 2)</h3>
            <table>
                <thead>
                    <tr>
                        <th>Resort ID</th>
                        <th>Resort Name</th>
                        <th>Room Type</th>
                        <th>Order Count</th>
                    </tr>
                </thead>
                <tbody>
        """
        
        # Add table rows
        for _, row in filtered_data.iterrows():
            room_type = self.get_room_type_description(row)
            html_content += f"""
                    <tr>
                        <td>{row['ResortId']}</td>
                        <td>{row['Resort']}</td>
                        <td class="room-type">{room_type}</td>
                        <td><strong>{row['SearchingOrderCount']}</strong></td>
                    </tr>
            """
        
        html_content += """
                </tbody>
            </table>
            
            <div style="margin-top: 30px; font-size: 12px; color: #666;">
                <p>This is an automated report generated by the Intellypod Resort Monitoring System.</p>
            </div>
        </body>
        </html>
        """
        
        # Create text content
        text_content = f"""
HIGH ORDER COUNT RESORT ALERT
Report generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

SUMMARY STATISTICS:
- Total Unique Resorts: {total_resorts}
- Total Orders: {total_orders:,.0f}
- Average Orders per Entry: {avg_orders:.1f}

RESORT DETAILS (SearchingOrderCount > 2):
================================================================
"""
        
        for _, row in filtered_data.iterrows():
            room_type = self.get_room_type_description(row)
            text_content += f"""
Resort ID: {row['ResortId']}
Resort Name: {row['Resort']}
Room Type: {room_type}
Order Count: {row['SearchingOrderCount']}
----------------------------------------
"""
        
        text_content += "\n\nThis is an automated report generated by the Intellypod Resort Monitoring System."
        
        return html_content, text_content
    
    def get_room_type_description(self, row):
        """Convert boolean room type columns to readable description"""
        room_types = []
        if row['Studio']:
            room_types.append('Studio')
        if row['Bed1']:
            room_types.append('1 Bedroom')
        if row['Bed2']:
            room_types.append('2 Bedroom')
        if row['Bed3']:
            room_types.append('3 Bedroom')
        if row['Bed4']:
            room_types.append('4 Bedroom')
        
        return ', '.join(room_types) if room_types else 'Unknown'
    
    def send_email_to_multiple(self, recipient_emails, subject=None, html_content=None, text_content=None):
        """Send email to multiple recipients using Mailjet"""
        if not subject:
            subject = f"Resort Order Alert - {datetime.now().strftime('%Y-%m-%d')}"
        
        # Convert string to list if single email provided
        if isinstance(recipient_emails, str):
            recipient_emails = [recipient_emails]
        
        try:
            # Prepare recipient list for Mailjet
            recipients = []
            for email in recipient_emails:
                recipients.append({
                    "Email": email,
                    "Name": "Resort Manager"
                })
            
            data = {
                'Messages': [
                    {
                        "From": {
                            "Email": self.sender_email,
                            "Name": "Intellypod Resort Monitoring"
                        },
                        "To": recipients,
                        "Subject": subject,
                        "TextPart": text_content,
                        "HTMLPart": html_content,
                        "CustomID": f"resort-alert-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
                    }
                ]
            }
            
            result = self.mailjet.send.create(data=data)
            
            if result.status_code == 200:
                self.logger.info(f"Email sent successfully to {len(recipient_emails)} recipients: {', '.join(recipient_emails)}")
                return True, f"Email sent successfully to {len(recipient_emails)} recipients"
            else:
                self.logger.error(f"Failed to send email: {result.status_code} - {result.json()}")
                return False, f"Failed to send email: {result.status_code}"
                
        except Exception as e:
            self.logger.error(f"Error sending email: {e}")
            return False, f"Error sending email: {e}"
    
    def send_email(self, recipient_email, subject=None, html_content=None, text_content=None):
        """Send email using Mailjet (backward compatibility)"""
        return self.send_email_to_multiple([recipient_email], subject, html_content, text_content)
    
    def process_and_send_alert(self, recipient_emails, csv_file_path='query_results.csv', threshold=2):
        """Main method to process data and send email alert to multiple recipients"""
        try:
            # Filter high order count resorts
            filtered_data = self.filter_high_order_count_resorts(csv_file_path, threshold)
            
            if filtered_data is None or filtered_data.empty:
                self.logger.info(f"No resorts found with SearchingOrderCount > {threshold}")
                return False, "No resorts meet the criteria"
            
            # Create email content
            html_content, text_content = self.create_email_content(filtered_data)
            
            if not html_content:
                return False, "Failed to create email content"
            
            # Send email to multiple recipients
            subject = f"High Order Count Alert - {len(filtered_data)} Resort Entries Found"
            success, message = self.send_email_to_multiple(recipient_emails, subject, html_content, text_content)
            
            return success, message
            
        except Exception as e:
            self.logger.error(f"Error in process_and_send_alert: {e}")
            return False, f"Error: {e}"

def main():
    """Main function to run the email service"""
    try:
        email_service = MailjetEmailService()
        
        # Multiple recipients - Add as many emails as you want
        recipient_emails = [
            "ujjwalr754@gmail.com",
            "sajol@intellypod.com",
            "kumar@intellypod.com",
            
        ]
        
        #  one email (backward compatibility)
        # recipient_emails = "ujjwalr754@gmail.com"
        
        # Process and send alert
        success, message = email_service.process_and_send_alert(
            recipient_emails=recipient_emails,
            csv_file_path='query_results.csv',
            threshold=2
        )
        
        if success:
            print(f"Success: {message}")
        else:
            print(f"Failed: {message}")
            
    except Exception as e:
        print(f"Error in main: {e}")

if __name__ == "__main__":
    main()